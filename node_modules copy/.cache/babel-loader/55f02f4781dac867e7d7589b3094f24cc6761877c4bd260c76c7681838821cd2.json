{"ast":null,"code":"import { useSingleSelectListState as $ijHKZ$useSingleSelectListState } from \"@react-stately/list\";\nimport { useRef as $ijHKZ$useRef, useEffect as $ijHKZ$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ /*\n    * Copyright 2020 Adobe. All rights reserved.\n    * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n    * you may not use this file except in compliance with the License. You may obtain a copy\n    * of the License at http://www.apache.org/licenses/LICENSE-2.0\n    *\n    * Unless required by applicable law or agreed to in writing, software distributed under\n    * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n    * OF ANY KIND, either express or implied. See the License for the specific language\n    * governing permissions and limitations under the License.\n    */\n\nfunction $76f919a04c5a7d14$export$4ba071daf4e486(props) {\n  let state = (0, $ijHKZ$useSingleSelectListState)({\n    ...props,\n    suppressTextValueWarning: true\n  });\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    selectedKey: currentSelectedKey\n  } = state;\n  let lastSelectedKey = (0, $ijHKZ$useRef)(currentSelectedKey);\n  (0, $ijHKZ$useEffect)(() => {\n    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n    let selectedKey = currentSelectedKey;\n    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n      selectedKey = collection.getFirstKey();\n      // loop over tabs until we find one that isn't disabled and select that\n      while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) selectedKey = collection.getKeyAfter(selectedKey);\n      // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n      if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) selectedKey = collection.getFirstKey();\n      if (selectedKey != null)\n        // directly set selection because replace/toggle selection won't consider disabled keys\n        selectionManager.setSelectedKeys([selectedKey]);\n    }\n    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n    if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);\n    lastSelectedKey.current = selectedKey;\n  });\n  return {\n    ...state,\n    isDisabled: props.isDisabled || false\n  };\n}\nexport { $76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState };","map":{"version":3,"names":["$76f919a04c5a7d14$export$4ba071daf4e486","props","state","$ijHKZ$useSingleSelectListState","suppressTextValueWarning","selectionManager","collection","selectedKey","currentSelectedKey","lastSelectedKey","$ijHKZ$useRef","$ijHKZ$useEffect","isEmpty","getItem","getFirstKey","disabledKeys","has","getLastKey","getKeyAfter","setSelectedKeys","focusedKey","isFocused","current","setFocusedKey","isDisabled"],"sources":["C:\\Users\\alans\\OneDrive\\Documents\\Typescript\\fetch-test\\node_modules\\@react-stately\\tabs\\dist\\packages\\@react-stately\\tabs\\src\\index.ts","C:\\Users\\alans\\OneDrive\\Documents\\Typescript\\fetch-test\\node_modules\\@react-stately\\tabs\\dist\\packages\\@react-stately\\tabs\\src\\useTabListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useTabListState} from './useTabListState';\n\nexport type {TabListProps} from '@react-types/tabs';\nexport type {TabListStateOptions, TabListState} from './useTabListState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionStateBase} from '@react-types/shared';\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {TabListProps} from '@react-types/tabs';\nimport {useEffect, useRef} from 'react';\n\nexport interface TabListStateOptions<T> extends Omit<TabListProps<T>, 'children'>, CollectionStateBase<T> {}\n\nexport interface TabListState<T> extends SingleSelectListState<T> {\n  /** Whether the tab list is disabled. */\n  isDisabled: boolean\n}\n\n/**\n * Provides state management for a Tabs component. Tabs include a TabList which tracks\n * which tab is currently selected and displays the content associated with that Tab in a TabPanel.\n */\nexport function useTabListState<T extends object>(props: TabListStateOptions<T>): TabListState<T> {\n  let state = useSingleSelectListState<T>({\n    ...props,\n    suppressTextValueWarning: true\n  });\n\n  let {\n    selectionManager,\n    collection,\n    selectedKey: currentSelectedKey\n  } = state;\n\n  let lastSelectedKey = useRef(currentSelectedKey);\n  useEffect(() => {\n    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n    let selectedKey = currentSelectedKey;\n    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n      selectedKey = collection.getFirstKey();\n      // loop over tabs until we find one that isn't disabled and select that\n      while (state.disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) {\n        selectedKey = collection.getKeyAfter(selectedKey);\n      }\n      // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n      if (state.disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) {\n        selectedKey = collection.getFirstKey();\n      }\n\n      if (selectedKey != null) {\n        // directly set selection because replace/toggle selection won't consider disabled keys\n        selectionManager.setSelectedKeys([selectedKey]);\n      }\n    }\n\n    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n    if (selectedKey != null && selectionManager.focusedKey == null || (!selectionManager.isFocused && selectedKey !== lastSelectedKey.current)) {\n      selectionManager.setFocusedKey(selectedKey);\n    }\n    lastSelectedKey.current = selectedKey;\n  });\n\n  return {\n    ...state,\n    isDisabled: props.isDisabled || false\n  };\n}\n"],"mappings":";;;AAAA;;;;;;;;;;ACAA,GDAA,CCAA;;;;;;;;;;;;AA4BO,SAASA,wCAAkCC,KAA6B;EAC7E,IAAIC,KAAA,GAAQ,IAAAC,+BAAuB,EAAK;IACtC,GAAGF,KAAK;IACRG,wBAAA,EAA0B;EAC5B;EAEA,IAAI;IAAAC,gBAAA,EACFA,gBAAA;IAAgBC,UAAA,EAChBA,UAAA;IACAC,WAAA,EAAaC;EAAkB,CAChC,GAAGN,KAAA;EAEJ,IAAIO,eAAA,GAAkB,IAAAC,aAAK,EAAEF,kBAAA;EAC7B,IAAAG,gBAAQ,EAAE;IACR;IACA,IAAIJ,WAAA,GAAcC,kBAAA;IAClB,IAAIH,gBAAA,CAAiBO,OAAA,IAAW,CAACN,UAAA,CAAWO,OAAA,CAAQN,WAAA,GAAc;MAChEA,WAAA,GAAcD,UAAA,CAAWQ,WAAA;MACzB;MACA,OAAOZ,KAAA,CAAMa,YAAA,CAAaC,GAAA,CAAIT,WAAA,KAAgBA,WAAA,KAAgBD,UAAA,CAAWW,UAAA,IACvEV,WAAA,GAAcD,UAAA,CAAWY,WAAA,CAAYX,WAAA;MAEvC;MACA,IAAIL,KAAA,CAAMa,YAAA,CAAaC,GAAA,CAAIT,WAAA,KAAgBA,WAAA,KAAgBD,UAAA,CAAWW,UAAA,IACpEV,WAAA,GAAcD,UAAA,CAAWQ,WAAA;MAG3B,IAAIP,WAAA,IAAe;QACjB;QACAF,gBAAA,CAAiBc,eAAA,CAAgB,CAACZ,WAAA,CAAY;IAElD;IAEA;IACA,IAAIA,WAAA,IAAe,QAAQF,gBAAA,CAAiBe,UAAA,IAAc,QAAS,CAACf,gBAAA,CAAiBgB,SAAA,IAAad,WAAA,KAAgBE,eAAA,CAAgBa,OAAA,EAChIjB,gBAAA,CAAiBkB,aAAA,CAAchB,WAAA;IAEjCE,eAAA,CAAgBa,OAAA,GAAUf,WAAA;EAC5B;EAEA,OAAO;IACL,GAAGL,KAAK;IACRsB,UAAA,EAAYvB,KAAA,CAAMuB,UAAA,IAAc;EAClC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}